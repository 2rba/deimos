# frozen_string_literal: true

# autogenerated by Deimos, do not modify
module Deimos
  # :nodoc:
  class <%= schema_classname(@current_schema) %> < SchemaRecord
<%- fields.each do |field| -%>
    # @return [<%= deimos_field_type(field) %>]
    attr_accessor :<%= field.name %>
<% end -%>
<%- if !@schema_is_key -%>
    # @return [Object] An optional payload key
    attr_accessor :payload_key
<% end -%>

    # @override
    def initialize(**kwargs)
      args = kwargs.with_indifferent_access
<%- fields.each do |field| -%>
      <%= "@#{field.name} = args[:#{field.name}]" %>
<% end -%>
<%- if !@schema_is_key -%>
      @payload_key = args[:payload_key]
<% end -%>
    end

    # @override
    def self.initialize_from_payload(payload)
      return unless payload.present?

      args = {}
      payload.each do |key, value|
<%- if @special_field_initialization.empty? -%>
        args[key.to_sym] = value
<%- else -%>
        args[key.to_sym] = case key.to_sym
<%- @special_field_initialization.each do |initialize_string, fields| -%>
                           when <%= fields.join(', ') %>
                             <%= initialize_string %>
<% end -%>
                           else
                             value
                           end
<%- end -%>
      end
      self.new(**args)
    end

    # @override
    def schema
      '<%= @current_schema.name %>'
    end

    # @override
    def namespace
      '<%= @current_schema.namespace %>'
    end

    # @override
    def to_h
<%- if !@schema_is_key -%>
      payload = {
<% else -%>
      {
<% end -%>
<%- fields.each do |field| -%>
        <%= field_to_h(field) %>
<% end -%>
      }
<%- if !@schema_is_key -%>
      @payload_key.present? ? payload.merge('payload_key' => @payload_key) : payload
<% end -%>
    end
  end
end
