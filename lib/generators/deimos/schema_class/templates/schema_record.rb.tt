# frozen_string_literal: true

# autogenerated by Deimos, do not modify
module Deimos
  # :nodoc:
  class <%= schema_classname(@current_schema) %> < SchemaRecord
<%- fields.each do |field| -%>
    # @return [<%= deimos_field_type(field) %>]
    attr_accessor :<%= field.name %>
<% end -%>
    # @return [Object]
    attr_accessor :payload_key

    # @override
    def initialize(**kwargs)
      super()
      args = kwargs.with_indifferent_access
<%- fields.each do |field| -%>
      <%= "@#{field.name} = args[:#{field.name}]" %>
<% end -%>
      @payload_key = args[:payload_key]
    end

    # @override
    def self.initialize_from_payload(payload)
      return unless payload.any?

      args = {}
      payload.each do |key, value|
<%- unless @special_field_formatting.present? -%>
        args[key.to_sym] = value
<%- else -%>
        args[key.to_sym] = case key.to_sym
<%- @special_field_formatting.each do |klass, format| -%>
                           when <%= format[:field_names].join(', ') %>
                             <%= klass %>.<%= format[:method] %>
<% end -%>
                           else
                             value
                           end
<%- end -%>
      end
      self.new(**args)
    end

    # @override
    def schema
      '<%= @current_schema.name %>'
    end

    # @override
    def namespace
      '<%= @current_schema.namespace %>'
    end

    # @override
    def to_h
      {
<%- fields.each do |field| -%>
        <%= field_to_h_formatting(field) %>
<% end -%>
      }
    end
  end
end
