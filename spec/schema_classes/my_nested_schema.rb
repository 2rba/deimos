# frozen_string_literal: true

# This file is autogenerated by Deimos, Do NOT modify
module Schemas
  ### Secondary Schema Classes ###
  # Autogenerated Schema for Record at com.my-namespace.MyNestedRecord
  class MyNestedRecord < Deimos::SchemaClass::Record
    ### Attribute Accessors ###
    # @param value [Integer]
    attr_accessor :some_int
    # @param value [Float]
    attr_accessor :some_float
    # @param value [String]
    attr_accessor :some_string
    # @param value [nil, Integer]
    attr_accessor :some_optional_int

    # @override
    def initialize(some_int: nil,
                   some_float: nil,
                   some_string: nil,
                   some_optional_int: nil)
      super
      self.some_int = some_int
      self.some_float = some_float
      self.some_string = some_string
      self.some_optional_int = some_optional_int
    end

    # @override
    def schema
      'MyNestedRecord'
    end

    # @override
    def namespace
      'com.my-namespace'
    end

    # @override
    def to_h
      {
        'some_int' => @some_int,
        'some_float' => @some_float,
        'some_string' => @some_string,
        'some_optional_int' => @some_optional_int
      }
    end
  end

  ### Primary Schema Class ###
  # Autogenerated Schema for Record at com.my-namespace.MyNestedSchema
  class MyNestedSchema < Deimos::SchemaClass::Record
    ### Attribute Readers ###
    # @return [MyNestedRecord]
    attr_reader :some_nested_record
    # @return [nil, MyNestedRecord]
    attr_reader :some_optional_record

    ### Attribute Accessors ###
    # @param value [String]
    attr_accessor :test_id
    # @param value [Float]
    attr_accessor :test_float
    # @param values [Array<String>]
    attr_accessor :test_array

    ### Attribute Writers ###
    # @param value [MyNestedRecord]
    def some_nested_record=(value)
      @some_nested_record = MyNestedRecord.initialize_from_value(value)
    end

    # @param value [nil, MyNestedRecord]
    def some_optional_record=(value)
      @some_optional_record = MyNestedRecord.initialize_from_value(value)
    end

    # @override
    def initialize(test_id: nil,
                   test_float: nil,
                   test_array: nil,
                   some_nested_record: nil,
                   some_optional_record: nil)
      super
      self.test_id = test_id
      self.test_float = test_float
      self.test_array = test_array
      self.some_nested_record = some_nested_record
      self.some_optional_record = some_optional_record
    end

    # @override
    def schema
      'MyNestedSchema'
    end

    # @override
    def namespace
      'com.my-namespace'
    end

    # @override
    def to_h
      {
        'test_id' => @test_id,
        'test_float' => @test_float,
        'test_array' => @test_array,
        'some_nested_record' => @some_nested_record&.to_h,
        'some_optional_record' => @some_optional_record&.to_h
      }
    end
  end
end
