# frozen_string_literal: true

# autogenerated by Deimos, do not modify
module Deimos
  # :nodoc:
  class MyNestedRecord < SchemaRecord
    ### Attribute Readers ###
    # @return [Integer]
    attr_reader :some_int
    # @return [Float]
    attr_reader :some_float
    # @return [String]
    attr_reader :some_string
    # @return [nil, Integer]
    attr_reader :some_optional_int

    # @return [Object] An optional payload key
    attr_accessor :payload_key

    ### Attribute Setters ###
    # @param value [Integer]
    def some_int=(value)
      @some_int = value
    end

    # @param value [Float]
    def some_float=(value)
      @some_float = value
    end

    # @param value [String]
    def some_string=(value)
      @some_string = value
    end

    # @param value [nil, Integer]
    def some_optional_int=(value)
      @some_optional_int = value
    end

    # @override
    def initialize(some_int:, some_float:, some_string:, some_optional_int:, payload_key: nil)
      super()
      self.some_int = some_int
      self.some_float = some_float
      self.some_string = some_string
      self.some_optional_int = some_optional_int
      self.payload_key = payload_key
    end

    # @override
    def schema
      'MyNestedRecord'
    end

    # @override
    def namespace
      'com.my-namespace'
    end

    # @override
    def to_h
      payload = {
        'some_int' => @some_int,
        'some_float' => @some_float,
        'some_string' => @some_string,
        'some_optional_int' => @some_optional_int
      }
      @payload_key.present? ? payload.merge('payload_key' => @payload_key) : payload
    end
  end
end
