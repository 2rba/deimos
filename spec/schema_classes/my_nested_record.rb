# frozen_string_literal: true

# autogenerated by Deimos, do not modify
module Deimos
  # :nodoc:
  class MyNestedRecord < SchemaRecord
    # @return [Integer]
    attr_accessor :some_int
    # @return [Float]
    attr_accessor :some_float
    # @return [String]
    attr_accessor :some_string
    # @return [nil, Integer]
    attr_accessor :some_optional_int
    # @return [Object]
    attr_accessor :payload_key

    # @override
    def initialize(**kwargs)
      super()
      args = kwargs.with_indifferent_access
      @some_int = args[:some_int]
      @some_float = args[:some_float]
      @some_string = args[:some_string]
      @some_optional_int = args[:some_optional_int]
      @payload_key = args[:payload_key]
    end

    # @override
    def self.initialize_from_payload(payload)
      return unless payload.present?

      args = {}
      payload.each do |key, value|
        args[key.to_sym] = value
      end
      self.new(**args)
    end

    # @override
    def schema
      'MyNestedRecord'
    end

    # @override
    def namespace
      'com.my-namespace'
    end

    # @override
    def to_h
      payload = {
        'some_int' => @some_int,
        'some_float' => @some_float,
        'some_string' => @some_string,
        'some_optional_int' => @some_optional_int
      }
      @payload_key.present? ? payload.merge('payload_key' => @payload_key) : payload
    end
  end
end
