# frozen_string_literal: true

# autogenerated by Deimos, do not modify
module Deimos
  # :nodoc:
  class MySchemaWithComplexTypes < SchemaRecord
    # @return [String]
    attr_accessor :test_id
    # @return [Float]
    attr_accessor :test_float
    # @return [Array<String>]
    attr_accessor :test_array
    # @return [Deimos::ARecord]
    attr_accessor :some_record
    # @return [nil, Deimos::ARecord]
    attr_accessor :some_optional_record
    # @return [Array<Deimos::ARecord>]
    attr_accessor :some_record_array
    # @return [Hash<String, Deimos::ARecord>]
    attr_accessor :some_record_map
    # @return [Array<Deimos::AnEnum>]
    attr_accessor :some_enum_array
    # @return [Object] An optional payload key
    attr_accessor :payload_key

    # @override
    def initialize(**kwargs)
      super()
      args = kwargs.with_indifferent_access
      @test_id = args[:test_id]
      @test_float = args[:test_float]
      @test_array = args[:test_array]
      @some_record = args[:some_record]
      @some_optional_record = args[:some_optional_record]
      @some_record_array = args[:some_record_array]
      @some_record_map = args[:some_record_map]
      @some_enum_array = args[:some_enum_array]
      @payload_key = args[:payload_key]
    end

    # @override
    def self.initialize_from_payload(payload)
      return unless payload.present?

      args = {}
      payload.each do |key, value|
        args[key.to_sym] = case key.to_sym
                           when :some_record, :some_optional_record
                             Deimos::ARecord.initialize_from_payload(value)
                           when :some_record_array
                             value.map { |v| Deimos::ARecord.initialize_from_payload(v) }
                           when :some_record_map
                             value.transform_values { |v| Deimos::ARecord.initialize_from_payload(v) }
                           when :some_enum_array
                             value.map { |v| Deimos::AnEnum.new(v) }
                           else
                             value
                           end
      end
      self.new(**args)
    end

    # @override
    def schema
      'MySchemaWithComplexTypes'
    end

    # @override
    def namespace
      'com.my-namespace'
    end

    # @override
    def to_h
      payload = {
        'test_id' => @test_id,
        'test_float' => @test_float,
        'test_array' => @test_array,
        'some_record' => @some_record&.to_h,
        'some_optional_record' => @some_optional_record&.to_h,
        'some_record_array' => @some_record_array.map { |v| v&.to_h },
        'some_record_map' => @some_record_map.transform_values { |v| v&.to_h },
        'some_enum_array' => @some_enum_array.map { |v| v&.to_h }
      }
      @payload_key.present? ? payload.merge('payload_key' => @payload_key) : payload
    end
  end
end
