# frozen_string_literal: true

# This file is autogenerated by Deimos, Do NOT modify
module Deimos
  # :nodoc:
  class MySchemaWithComplexTypes < SchemaClass::Record
    # @return [Deimos::ARecord]
    attr_reader :some_record
    # @return [nil, Deimos::ARecord]
    attr_reader :some_optional_record
    # @return [Array<Deimos::ARecord>]
    attr_reader :some_record_array
    # @return [Hash<String, Deimos::ARecord>]
    attr_reader :some_record_map
    # @return [Array<Deimos::AnEnum>]
    attr_reader :some_enum_array

    # @param value [String]
    attr_accessor :test_id
    # @param value [Float]
    attr_accessor :test_float
    # @param values [Array<String>]
    attr_accessor :test_string_array
    # @param values [Array<Integer>]
    attr_accessor :test_int_array
    # @param value [Integer, nil]
    attr_accessor :test_optional_int
    # @param values [Hash<String, Integer>]
    attr_accessor :some_integer_map
    # @return [Object] An optional payload key
    attr_accessor :payload_key

    # @param value [Deimos::ARecord]
    def some_record=(value)
      @some_record = Deimos::ARecord.initialize_from_value(value)
    end

    # @param value [nil, Deimos::ARecord]
    def some_optional_record=(value)
      @some_optional_record = Deimos::ARecord.initialize_from_value(value)
    end

    # @param values [Array<Deimos::ARecord>]
    def some_record_array=(values)
      @some_record_array = values.map do |value|
        Deimos::ARecord.initialize_from_value(value)
      end
    end

    # @param values [Hash<String, Deimos::ARecord>]
    def some_record_map=(values)
      @some_record_map = values.transform_values do |value|
        Deimos::ARecord.initialize_from_value(value)
      end
    end

    # @param values [Array<Deimos::AnEnum>]
    def some_enum_array=(values)
      @some_enum_array = values.map do |value|
        Deimos::AnEnum.initialize_from_value(value)
      end
    end

    # @override
    def initialize(test_id: nil,
                   test_float: nil,
                   test_string_array: ["test"],
                   test_int_array: [123],
                   test_optional_int: 123,
                   some_integer_map: {"abc"=>123},
                   some_record: {"a_record_field"=>"Test String"},
                   some_optional_record: nil,
                   some_record_array: nil,
                   some_record_map: nil,
                   some_enum_array: nil,
                   payload_key: nil)
      super()
      self.test_id = test_id
      self.test_float = test_float
      self.test_string_array = test_string_array
      self.test_int_array = test_int_array
      self.test_optional_int = test_optional_int
      self.some_integer_map = some_integer_map
      self.some_record = some_record
      self.some_optional_record = some_optional_record
      self.some_record_array = some_record_array
      self.some_record_map = some_record_map
      self.some_enum_array = some_enum_array
      self.payload_key = payload_key
    end

    # @override
    def schema
      'MySchemaWithComplexTypes'
    end

    # @override
    def namespace
      'com.my-namespace'
    end

    # @override
    def to_h
      payload = {
        'test_id' => @test_id,
        'test_float' => @test_float,
        'test_string_array' => @test_string_array,
        'test_int_array' => @test_int_array,
        'test_optional_int' => @test_optional_int,
        'some_integer_map' => @some_integer_map,
        'some_record' => @some_record&.to_h,
        'some_optional_record' => @some_optional_record&.to_h,
        'some_record_array' => @some_record_array.map { |v| v&.to_h },
        'some_record_map' => @some_record_map.transform_values { |v| v&.to_h },
        'some_enum_array' => @some_enum_array.map { |v| v&.to_h }
      }
      @payload_key.present? ? payload.merge('payload_key' => @payload_key) : payload
    end
  end
end
