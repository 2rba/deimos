# frozen_string_literal: true

# autogenerated by Deimos, do not modify
module Deimos
  # :nodoc:
  class Generated < SchemaRecord
    # @return [String]
    attr_accessor :a_string
    # @return [Integer]
    attr_accessor :a_int
    # @return [Integer]
    attr_accessor :a_long
    # @return [Float]
    attr_accessor :a_float
    # @return [Float]
    attr_accessor :a_double
    # @return [nil, Integer]
    attr_accessor :an_optional_int
    # @return [Deimos::AnEnum]
    attr_accessor :an_enum
    # @return [Array<Integer>]
    attr_accessor :an_array
    # @return [Hash<String, String>]
    attr_accessor :a_map
    # @return [String]
    attr_accessor :timestamp
    # @return [String]
    attr_accessor :message_id
    # @return [Deimos::ARecord]
    attr_accessor :a_record
    # @return [Object] An optional payload key
    attr_accessor :payload_key

    # @override
    def initialize(**kwargs)
      args = kwargs.with_indifferent_access
      @a_string = args[:a_string]
      @a_int = args[:a_int]
      @a_long = args[:a_long]
      @a_float = args[:a_float]
      @a_double = args[:a_double]
      @an_optional_int = args[:an_optional_int]
      @an_enum = args[:an_enum]
      @an_array = args[:an_array]
      @a_map = args[:a_map]
      @timestamp = args[:timestamp]
      @message_id = args[:message_id]
      @a_record = args[:a_record]
      @payload_key = args[:payload_key]
    end

    # @override
    def self.initialize_from_payload(payload)
      return unless payload.present?

      args = {}
      payload.each do |key, value|
        args[key.to_sym] = case key.to_sym
                           when :an_enum
                             Deimos::AnEnum.new(value)
                           when :a_record
                             Deimos::ARecord.initialize_from_payload(value)
                           else
                             value
                           end
      end
      self.new(**args)
    end

    # @override
    def schema
      'Generated'
    end

    # @override
    def namespace
      'com.my-namespace'
    end

    # @override
    def to_h
      payload = {
        'a_string' => @a_string,
        'a_int' => @a_int,
        'a_long' => @a_long,
        'a_float' => @a_float,
        'a_double' => @a_double,
        'an_optional_int' => @an_optional_int,
        'an_enum' => @an_enum&.to_h,
        'an_array' => @an_array,
        'a_map' => @a_map,
        'timestamp' => @timestamp,
        'message_id' => @message_id,
        'a_record' => @a_record&.to_h
      }
      @payload_key.present? ? payload.merge('payload_key' => @payload_key) : payload
    end
  end
end
